###############################################################################
#
# IAR C/C++ Compiler V6.80.5.1069 for Atmel AVR           07/Jan/2019  11:31:15
# Copyright 1996-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR
#
#    Source file  =  D:\lab_18\lab_10_lcd_printf\lab_10_lcd_printf.c
#    Command line =  
#        D:\lab_18\lab_10_lcd_printf\lab_10_lcd_printf.c --cpu=m128 -ms -o
#        D:\lab_18\lab_10_lcd_printf\Debug\Obj -lC
#        D:\lab_18\lab_10_lcd_printf\Debug\List -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I ..\lib\ --eeprom_size
#        4096 --clib -Ol
#    Locale       =  Polish_Poland.1250
#    List file    =  
#        D:\lab_18\lab_10_lcd_printf\Debug\List\lab_10_lcd_printf.lst
#    Object file  =  
#        D:\lab_18\lab_10_lcd_printf\Debug\Obj\lab_10_lcd_printf.r90
#
###############################################################################

D:\lab_18\lab_10_lcd_printf\lab_10_lcd_printf.c
      1          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x57
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1
      2          #include <inavr.h>
      3          #include <stdio.h>
      4          #include <pgmspace.h>
      5          #include "rtc_simple.h"
      6          #include "hd44780.h"
      7          #include "queue.h"
      8          #include "keyb_drv.h"
      9          
     10          #define CLOCK_INC	0x03
     11          #define CLOCK_SET       0x04
     12          
     13          
     14          /// 4 5 6 7 ///
     15          /// 0 1 2 3 ///
     16          typedef union TSysRq {
     17              unsigned char msg;
     18              struct {
     19          		unsigned char rq_data	: 4;
     20          		unsigned char rq_id 	: 4;
     21              };
     22          } TSysRq;
     23          
     24          //---------------------------------------------------------
     25          // Constants declaration
     26          //---------------------------------------------------------
     27          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     28          static const char __flash LCDUserChar[] = {
   \                     LCDUserChar:
   \   00000000   001F00000000       DC8 31, 0, 0, 0, 0, 0, 0, 31, 31, 0, 16, 16, 16, 16, 0, 31, 31, 0, 24
   \              1F00001F1010
   \              10101F00001F
   \              18          
   \   00000013   181800181F1F       DC8 24, 24, 24, 0, 31, 31, 0, 28, 28, 28, 28, 0, 31, 31, 0, 30, 30, 30
   \              1C001C1C001C
   \              1F1F1E001E1E
   \   00000025   001E1F1F1F00       DC8 30, 0, 31, 31, 0, 31, 31, 31, 31, 0, 31, 3, 2, 2, 2, 2, 2, 2, 3, 24
   \              1F1F001F031F
   \              020202020202
   \              1803        
   \   00000039   080808080808       DC8 8, 8, 8, 8, 8, 8, 24
   \              18          
     29              0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
     30              0x1F, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x1F,
     31              0x1F, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x1F,
     32              0x1F, 0x00, 0x1C, 0x1C, 0x1C, 0x1C, 0x00, 0x1F,
     33              0x1F, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x1F,
     34              0x1F, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x1F,
     35              0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03,
     36              0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18 };
     37          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     38          static const char __flash sSun[] = "Sun";
   \                     sSun:
   \   00000000   7553006E           DC8 "Sun"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     39          static char const __flash sMon[] = "Mon";
   \                     sMon:
   \   00000000   6F4D006E           DC8 "Mon"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     40          static char const __flash sTue[] = "Tue";
   \                     sTue:
   \   00000000   75540065           DC8 "Tue"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     41          static char const __flash sWed[] = "Wed";
   \                     sWed:
   \   00000000   65570064           DC8 "Wed"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     42          static char const __flash sThu[] = "Thu";
   \                     sThu:
   \   00000000   68540075           DC8 "Thu"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     43          static char const __flash sFri[] = "Fri";
   \                     sFri:
   \   00000000   72460069           DC8 "Fri"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     44          static char const __flash sSat[] = "Sat";
   \                     sSat:
   \   00000000   61530074           DC8 "Sat"

   \                                 In  segment NEAR_F, align 1, keep-with-next
     45          static const char __flash sCl[] = "%02d:%02d:%02d %s";
   \                     sCl:
   \   00000000   30256432253A       DC8 "%02d:%02d:%02d %s"
   \              32303A643025
   \              643225200073
     46          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     47          __flash const char __flash* sWDay[] = {
   \                     sWDay:
   \   00000000   ............       DC16 sSun, sMon, sTue, sWed, sThu, sFri, sSat
   \              ............
   \              ....        
     48          	sSun, sMon, sTue, sWed, sThu, sFri, sSat
     49           };
     50          
     51          //---------------------------------------------------------
     52          // Global variables declaration
     53          //---------------------------------------------------------

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     54          TClock rtc;
   \                     rtc:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     55          TQueue event_queue;
   \                     event_queue:
   \   00000000                      DS8 6

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     56          unsigned char ev_q_buf[16];
   \                     ev_q_buf:
   \   00000000                      DS8 16

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     57          char tmp_buf[4];
   \                     tmp_buf:
   \   00000000                      DS8 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     58          TSysRq rq;
   \                     rq:
   \   00000000                      DS8 1
     59          
     60          //This function is used by printf function to transfer data to STDIO device

   \                                 In  segment CODE, align 2, keep-with-next
     61          int putchar(int ch)
   \                     putchar:
     62          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     63          	LCDPutChar(ch);
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ........           CALL    LCDPutChar
     64          	return ch;
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   9189               LD      R24, Y+
   \   00000010   9199               LD      R25, Y+
   \   00000012   9508               RET
     65          }
     66          

   \                                 In  segment CODE, align 2, keep-with-next
     67          void onClockSet()
   \                     onClockSet:
     68          {
     69              LCDGoTo(LINE_0 + 0);
   \   00000000   E000               LDI     R16, 0
   \   00000002   ........           CALL    LCDGoTo
     70              LCDPutChar('S');
   \   00000006   E503               LDI     R16, 83
   \   00000008   ........           CALL    LCDPutChar
     71              int currCurPos=9;
   \   0000000C   E009               LDI     R16, 9
   \   0000000E   E010               LDI     R17, 0
     72              LCDGoTo(LINE_1 + currCurPos);
   \   00000010   5C00               SUBI    R16, 192
   \   00000012   ........           CALL    LCDGoTo
     73              
     74              
     75            
     76          }
   \   00000016   9508               RET

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     77          static char currPos = '0';
   \                     currPos:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for currPos>`
     78          

   \                                 In  segment CODE, align 2, keep-with-next
     79          void cInc()
   \                     cInc:
     80          {
     81            if(currPos == '0')
   \   00000000   9100....           LDS     R16, currPos
   \   00000004   3300               CPI     R16, 48
   \   00000006   F471               BRNE    ??cInc_0
     82              if(rtc.sec == 60){
   \   00000008   9100....           LDS     R16, rtc
   \   0000000C   330C               CPI     R16, 60
   \   0000000E   F421               BRNE    ??cInc_1
     83                rtc.sec=0;
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     rtc, R16
   \   00000016   9508               RET
     84              } else{
     85                rtc.sec++;
   \                     ??cInc_1:
   \   00000018   9100....           LDS     R16, rtc
   \   0000001C   9503               INC     R16
   \   0000001E   9300....           STS     rtc, R16
   \   00000022   9508               RET
     86              }
     87            else if(currPos == '1')
   \                     ??cInc_0:
   \   00000024   9100....           LDS     R16, currPos
   \   00000028   3301               CPI     R16, 49
   \   0000002A   F471               BRNE    ??cInc_2
     88                 if(rtc.min == 60){
   \   0000002C   9100....           LDS     R16, (rtc + 1)
   \   00000030   330C               CPI     R16, 60
   \   00000032   F421               BRNE    ??cInc_3
     89                rtc.min=0;
   \   00000034   E000               LDI     R16, 0
   \   00000036   9300....           STS     (rtc + 1), R16
   \   0000003A   9508               RET
     90              } else{
     91                rtc.min++;
   \                     ??cInc_3:
   \   0000003C   9100....           LDS     R16, (rtc + 1)
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     (rtc + 1), R16
   \   00000046   9508               RET
     92              }
     93            else if(currPos == '2')
   \                     ??cInc_2:
   \   00000048   9100....           LDS     R16, currPos
   \   0000004C   3302               CPI     R16, 50
   \   0000004E   F429               BRNE    ??cInc_4
     94              rtc.hr++;
   \   00000050   9100....           LDS     R16, (rtc + 2)
   \   00000054   9503               INC     R16
   \   00000056   9300....           STS     (rtc + 2), R16
     95          }
   \                     ??cInc_4:
   \   0000005A   9508               RET
     96          

   \                                 In  segment CODE, align 2, keep-with-next
     97          void cDec()
   \                     cDec:
     98          {
     99            if(currPos == '0')
   \   00000000   9100....           LDS     R16, currPos
   \   00000004   3300               CPI     R16, 48
   \   00000006   F529               BRNE    ??cDec_0
    100              if(rtc.sec != 0)
   \   00000008   9100....           LDS     R16, rtc
   \   0000000C   2300               TST     R16
   \   0000000E   F031               BREQ    ??cDec_1
    101                rtc.sec--;
   \   00000010   9100....           LDS     R16, rtc
   \   00000014   950A               DEC     R16
   \   00000016   9300....           STS     rtc, R16
   \   0000001A   9508               RET
    102            else if(currPos == '1')
   \                     ??cDec_1:
   \   0000001C   9100....           LDS     R16, currPos
   \   00000020   3301               CPI     R16, 49
   \   00000022   F4B9               BRNE    ??cDec_0
    103              if(rtc.min != 0)
   \   00000024   9100....           LDS     R16, (rtc + 1)
   \   00000028   2300               TST     R16
   \   0000002A   F031               BREQ    ??cDec_2
    104                rtc.min--;
   \   0000002C   9100....           LDS     R16, (rtc + 1)
   \   00000030   950A               DEC     R16
   \   00000032   9300....           STS     (rtc + 1), R16
   \   00000036   9508               RET
    105            else if(currPos == '2')
   \                     ??cDec_2:
   \   00000038   9100....           LDS     R16, currPos
   \   0000003C   3302               CPI     R16, 50
   \   0000003E   F449               BRNE    ??cDec_0
    106              if(rtc.hr != 0)
   \   00000040   9100....           LDS     R16, (rtc + 2)
   \   00000044   2300               TST     R16
   \   00000046   F029               BREQ    ??cDec_0
    107                rtc.hr--;
   \   00000048   9100....           LDS     R16, (rtc + 2)
   \   0000004C   950A               DEC     R16
   \   0000004E   9300....           STS     (rtc + 2), R16
    108          }
   \                     ??cDec_0:
   \   00000052   9508               RET
    109          

   \                                 In  segment CODE, align 2, keep-with-next
    110          void onKeyDown()
   \                     onKeyDown:
    111          {
    112                  if(rq.rq_data == 0){ //INCREMENT KEY
   \   00000000   9100....           LDS     R16, rq
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   2300               TST     R16
   \   00000008   F459               BRNE    ??onKeyDown_0
    113                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   0000000A   9100....           LDS     R16, rq
   \   0000000E   700F               ANDI    R16, 0x0F
   \   00000010   5B0C               SUBI    R16, 188
   \   00000012   ........           CALL    LCDGoTo
    114                    cInc();
   \   00000016   ....               RCALL   cInc
    115                    LCDPutChar('I');
   \   00000018   E409               LDI     R16, 73
   \   0000001A   ........           CALL    LCDPutChar
   \   0000001E   9508               RET
    116                  }
    117                  else if (rq.rq_data == 1){ //DECREMENT KEY
   \                     ??onKeyDown_0:
   \   00000020   9100....           LDS     R16, rq
   \   00000024   700F               ANDI    R16, 0x0F
   \   00000026   3001               CPI     R16, 1
   \   00000028   F441               BRNE    ??onKeyDown_1
    118                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   0000002A   9100....           LDS     R16, rq
   \   0000002E   700F               ANDI    R16, 0x0F
   \   00000030   5B0C               SUBI    R16, 188
   \   00000032   ........           CALL    LCDGoTo
    119                    cDec();
   \   00000036   ....               RCALL   cDec
   \   00000038   9508               RET
    120                  }
    121                  else if (rq.rq_data == 2){ //NEXT KEY
   \                     ??onKeyDown_1:
   \   0000003A   9100....           LDS     R16, rq
   \   0000003E   700F               ANDI    R16, 0x0F
   \   00000040   3002               CPI     R16, 2
   \   00000042   F501               BRNE    ??onKeyDown_2
    122                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   00000044   9100....           LDS     R16, rq
   \   00000048   700F               ANDI    R16, 0x0F
   \   0000004A   5B0C               SUBI    R16, 188
   \   0000004C   ........           CALL    LCDGoTo
    123                    if(currPos == '2')
   \   00000050   9100....           LDS     R16, currPos
   \   00000054   3302               CPI     R16, 50
   \   00000056   F421               BRNE    ??onKeyDown_3
    124                      currPos = '0';
   \   00000058   E300               LDI     R16, 48
   \   0000005A   9300....           STS     currPos, R16
   \   0000005E   C00D               RJMP    ??onKeyDown_4
    125                    else if(currPos == '1' || currPos == '0')
   \                     ??onKeyDown_3:
   \   00000060   9100....           LDS     R16, currPos
   \   00000064   3301               CPI     R16, 49
   \   00000066   F021               BREQ    ??onKeyDown_5
   \   00000068   9100....           LDS     R16, currPos
   \   0000006C   3300               CPI     R16, 48
   \   0000006E   F429               BRNE    ??onKeyDown_4
    126                      currPos++;
   \                     ??onKeyDown_5:
   \   00000070   9100....           LDS     R16, currPos
   \   00000074   9503               INC     R16
   \   00000076   9300....           STS     currPos, R16
    127                    
    128                    LCDPutChar(currPos);
   \                     ??onKeyDown_4:
   \   0000007A   9100....           LDS     R16, currPos
   \   0000007E   ........           CALL    LCDPutChar
   \   00000082   9508               RET
    129                   
    130                  }
    131                  else if (rq.rq_data == 3){ //PREVIOUS KEY
   \                     ??onKeyDown_2:
   \   00000084   9100....           LDS     R16, rq
   \   00000088   700F               ANDI    R16, 0x0F
   \   0000008A   3003               CPI     R16, 3
   \   0000008C   F501               BRNE    ??onKeyDown_6
    132                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   0000008E   9100....           LDS     R16, rq
   \   00000092   700F               ANDI    R16, 0x0F
   \   00000094   5B0C               SUBI    R16, 188
   \   00000096   ........           CALL    LCDGoTo
    133                    if(currPos == '0')
   \   0000009A   9100....           LDS     R16, currPos
   \   0000009E   3300               CPI     R16, 48
   \   000000A0   F421               BRNE    ??onKeyDown_7
    134                      currPos = '2';
   \   000000A2   E302               LDI     R16, 50
   \   000000A4   9300....           STS     currPos, R16
   \   000000A8   C00D               RJMP    ??onKeyDown_8
    135                    else if(currPos == '1' || currPos == '2')
   \                     ??onKeyDown_7:
   \   000000AA   9100....           LDS     R16, currPos
   \   000000AE   3301               CPI     R16, 49
   \   000000B0   F021               BREQ    ??onKeyDown_9
   \   000000B2   9100....           LDS     R16, currPos
   \   000000B6   3302               CPI     R16, 50
   \   000000B8   F429               BRNE    ??onKeyDown_8
    136                      currPos--;
   \                     ??onKeyDown_9:
   \   000000BA   9100....           LDS     R16, currPos
   \   000000BE   950A               DEC     R16
   \   000000C0   9300....           STS     currPos, R16
    137                    LCDPutChar(currPos);
   \                     ??onKeyDown_8:
   \   000000C4   9100....           LDS     R16, currPos
   \   000000C8   ........           CALL    LCDPutChar
   \   000000CC   9508               RET
    138                    
    139                  }
    140                  else if (rq.rq_data == 4){ //ESCAPE KEY
   \                     ??onKeyDown_6:
   \   000000CE   9100....           LDS     R16, rq
   \   000000D2   700F               ANDI    R16, 0x0F
   \   000000D4   3004               CPI     R16, 4
   \   000000D6   F451               BRNE    ??onKeyDown_10
    141                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   000000D8   9100....           LDS     R16, rq
   \   000000DC   700F               ANDI    R16, 0x0F
   \   000000DE   5B0C               SUBI    R16, 188
   \   000000E0   ........           CALL    LCDGoTo
    142                    LCDPutChar('E');
   \   000000E4   E405               LDI     R16, 69
   \   000000E6   ........           CALL    LCDPutChar
   \   000000EA   9508               RET
    143                  }
    144                  else if (rq.rq_data == 5){ //ACCEPT KEY
   \                     ??onKeyDown_10:
   \   000000EC   9100....           LDS     R16, rq
   \   000000F0   700F               ANDI    R16, 0x0F
   \   000000F2   3005               CPI     R16, 5
   \   000000F4   F451               BRNE    ??onKeyDown_11
    145                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   000000F6   9100....           LDS     R16, rq
   \   000000FA   700F               ANDI    R16, 0x0F
   \   000000FC   5B0C               SUBI    R16, 188
   \   000000FE   ........           CALL    LCDGoTo
    146                    LCDPutChar('A');
   \   00000102   E401               LDI     R16, 65
   \   00000104   ........           CALL    LCDPutChar
   \   00000108   9508               RET
    147                  }
    148                  else if (rq.rq_data == 6){ //CLOCK SET MODE KEY
   \                     ??onKeyDown_11:
   \   0000010A   9100....           LDS     R16, rq
   \   0000010E   700F               ANDI    R16, 0x0F
   \   00000110   3006               CPI     R16, 6
   \   00000112   F459               BRNE    ??onKeyDown_12
    149                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   00000114   9100....           LDS     R16, rq
   \   00000118   700F               ANDI    R16, 0x0F
   \   0000011A   5B0C               SUBI    R16, 188
   \   0000011C   ........           CALL    LCDGoTo
    150                    LCDPutChar('C');
   \   00000120   E403               LDI     R16, 67
   \   00000122   ........           CALL    LCDPutChar
    151                    onClockSet();
   \   00000126   ....               RCALL   onClockSet
   \   00000128   9508               RET
    152                  }
    153                  else if (rq.rq_data == 7){ //ALARM SET MODE KEY
   \                     ??onKeyDown_12:
   \   0000012A   9100....           LDS     R16, rq
   \   0000012E   700F               ANDI    R16, 0x0F
   \   00000130   3007               CPI     R16, 7
   \   00000132   F449               BRNE    ??onKeyDown_13
    154                    LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   00000134   9100....           LDS     R16, rq
   \   00000138   700F               ANDI    R16, 0x0F
   \   0000013A   5B0C               SUBI    R16, 188
   \   0000013C   ........           CALL    LCDGoTo
    155                    LCDPutChar('a');
   \   00000140   E601               LDI     R16, 97
   \   00000142   ........           CALL    LCDPutChar
    156                  }
    157                  else
    158                  {
    159                    
    160                  }
    161          }
   \                     ??onKeyDown_13:
   \   00000146   9508               RET
    162          

   \                                 In  segment CODE, align 2, keep-with-next
    163          void onKeyUp()
   \                     onKeyUp:
    164          {
    165          	LCDGoTo(LINE_1 + 4 + rq.rq_data);
   \   00000000   9100....           LDS     R16, rq
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   5B0C               SUBI    R16, 188
   \   00000008   ........           CALL    LCDGoTo
    166          	LCDPutChar(' ');
   \   0000000C   E200               LDI     R16, 32
   \   0000000E   ........           CALL    LCDPutChar
    167          }
   \   00000012   9508               RET
    168          

   \                                 In  segment CODE, align 2, keep-with-next
    169          void onClockInc()
   \                     onClockInc:
    170          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
    171          	LCDGoTo(LINE_0 + 2);
   \   00000004   E002               LDI     R16, 2
   \   00000006   ........           CALL    LCDGoTo
    172          	printf_P(
    173          		sCl,
    174          		rtc.hr,
    175          		rtc.min,
    176          		rtc.sec,
    177          		memcpy_P(tmp_buf, sWDay[rtc.wday], sizeof(sSun)));
   \   0000000A   E004               LDI     R16, 4
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   91E0....           LDS     R30, (rtc + 3)
   \   00000012   E0F0               LDI     R31, 0
   \   00000014   0FEE               LSL     R30
   \   00000016   1FFF               ROL     R31
   \   00000018   ....               SUBI    R30, LOW((-(sWDay) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(sWDay) & 0xFFFF) >> 8
   \   0000001C   9145               LPM     R20, Z+
   \   0000001E   9154               LPM     R21, Z
   \   00000020   2FE4               MOV     R30, R20
   \   00000022   2FF5               MOV     R31, R21
   \   00000024   E030               LDI     R19, 0
   \   00000026   ....               LDI     R26, LOW(tmp_buf)
   \   00000028   ....               LDI     R27, (tmp_buf) >> 8
   \   0000002A   ........           CALL    memcpy_P
   \   0000002E   931A               ST      -Y, R17
   \   00000030   930A               ST      -Y, R16
   \   00000032   9100....           LDS     R16, rtc
   \   00000036   E010               LDI     R17, 0
   \   00000038   931A               ST      -Y, R17
   \   0000003A   930A               ST      -Y, R16
   \   0000003C   9100....           LDS     R16, (rtc + 1)
   \   00000040   E010               LDI     R17, 0
   \   00000042   931A               ST      -Y, R17
   \   00000044   930A               ST      -Y, R16
   \   00000046   9100....           LDS     R16, (rtc + 2)
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   931A               ST      -Y, R17
   \   0000004E   930A               ST      -Y, R16
   \   00000050   ....               LDI     R16, LOW(sCl)
   \   00000052   ....               LDI     R17, (sCl) >> 8
   \   00000054   E020               LDI     R18, 0
   \   00000056   ........           CALL    printf_P
   \   0000005A   9628               ADIW    R29:R28, 8
    178          }
   \   0000005C   91A9               LD      R26, Y+
   \   0000005E   91B9               LD      R27, Y+
   \   00000060   9508               RET
    179          

   \                                 In  segment CODE, align 2, keep-with-next
    180          static void InitDevices()
   \                     InitDevices:
    181          {
    182              LCDInit();
   \   00000000   ........           CALL    LCDInit
    183              LCDLoadUserCharP(LCDUserChar, 0, sizeof(LCDUserChar));
   \   00000004   E430               LDI     R19, 64
   \   00000006   E020               LDI     R18, 0
   \   00000008   ....               LDI     R16, LOW(LCDUserChar)
   \   0000000A   ....               LDI     R17, (LCDUserChar) >> 8
   \   0000000C   ........           CALL    LCDLoadUserCharP
    184              LCDClear();
   \   00000010   ........           CALL    LCDClear
    185              //T0 start
    186              TCNT0 = 0;
   \   00000014   E000               LDI     R16, 0
   \   00000016   BF02               OUT     0x32, R16
    187              OCR0 = 71;
   \   00000018   E407               LDI     R16, 71
   \   0000001A   BF01               OUT     0x31, R16
    188          
    189              TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS01) | (1 << CS00);
   \   0000001C   E00F               LDI     R16, 15
   \   0000001E   BF03               OUT     0x33, R16
    190              //dvt = 50;
    191              //Timers interrupt mask
    192              TIMSK = (1 << OCIE0);
   \   00000020   E002               LDI     R16, 2
   \   00000022   BF07               OUT     0x37, R16
    193              __enable_interrupt();	
   \   00000024   9478               SEI
    194          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_TCNT0
   \   00000028                      REQUIRE _A_OCR0
   \   00000028                      REQUIRE _A_TCCR0
   \   00000028                      REQUIRE _A_TIMSK
    195          
    196          #pragma vector = TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
    197          __interrupt void ISR_OCR0()
   \                     ISR_OCR0:
    198          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    199          static unsigned char pre_dv = 100;
    200          	kbService(&event_queue);
   \   00000024   ....               LDI     R16, LOW(event_queue)
   \   00000026   ....               LDI     R17, (event_queue) >> 8
   \   00000028   ........           CALL    kbService
    201          	if(--pre_dv) return;
   \   0000002C   9100....           LDS     R16, ??pre_dv
   \   00000030   950A               DEC     R16
   \   00000032   9300....           STS     ??pre_dv, R16
   \   00000036   9100....           LDS     R16, ??pre_dv
   \   0000003A   2300               TST     R16
   \   0000003C   F461               BRNE    ??ISR_OCR0_0
    202          	pre_dv = 100;
   \   0000003E   E604               LDI     R16, 100
   \   00000040   9300....           STS     ??pre_dv, R16
    203          	rtcInc(&rtc);	
   \   00000044   ....               LDI     R16, LOW(rtc)
   \   00000046   ....               LDI     R17, (rtc) >> 8
   \   00000048   ........           CALL    rtcInc
    204          	qAdd(&event_queue, MSG(CLOCK_INC, 0));
   \   0000004C   E320               LDI     R18, 48
   \   0000004E   ....               LDI     R16, LOW(event_queue)
   \   00000050   ....               LDI     R17, (event_queue) >> 8
   \   00000052   ........           CALL    qAdd
    205          }
   \                     ??ISR_OCR0_0:
   \   00000056   BF9B               OUT     0x3B, R25
   \   00000058   BF8F               OUT     0x3F, R24
   \   0000005A   9109               LD      R16, Y+
   \   0000005C   9119               LD      R17, Y+
   \   0000005E   9129               LD      R18, Y+
   \   00000060   9139               LD      R19, Y+
   \   00000062   9149               LD      R20, Y+
   \   00000064   9159               LD      R21, Y+
   \   00000066   9169               LD      R22, Y+
   \   00000068   9179               LD      R23, Y+
   \   0000006A   9009               LD      R0, Y+
   \   0000006C   9019               LD      R1, Y+
   \   0000006E   9029               LD      R2, Y+
   \   00000070   9039               LD      R3, Y+
   \   00000072   91E9               LD      R30, Y+
   \   00000074   91F9               LD      R31, Y+
   \   00000076   9189               LD      R24, Y+
   \   00000078   9199               LD      R25, Y+
   \   0000007A   9518               RETI

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     ??pre_dv:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for pre_dv>`
    206          

   \                                 In  segment CODE, align 2, keep-with-next
    207          void main()
   \                     main:
    208          {	
    209          	InitDevices();
   \   00000000   ....               RCALL   InitDevices
    210          	qInit(&event_queue, ev_q_buf, sizeof(ev_q_buf));
   \   00000002   E140               LDI     R20, 16
   \   00000004   ....               LDI     R18, LOW(ev_q_buf)
   \   00000006   ....               LDI     R19, (ev_q_buf) >> 8
   \   00000008   ....               LDI     R16, LOW(event_queue)
   \   0000000A   ....               LDI     R17, (event_queue) >> 8
   \   0000000C   ........           CALL    qInit
    211          	qAdd(&event_queue, MSG(CLOCK_INC, 0));
   \   00000010   E320               LDI     R18, 48
   \   00000012   ....               LDI     R16, LOW(event_queue)
   \   00000014   ....               LDI     R17, (event_queue) >> 8
   \   00000016   ........           CALL    qAdd
   \   0000001A   C001               RJMP    ??main_0
    212          	for(;;)
    213          	{
    214          		while(!qGet(&event_queue, &rq.msg));
    215          		switch(rq.rq_id) {
    216          		case KEY_DOWN:
    217          			onKeyDown();
   \                     ??main_1:
   \   0000001C   ....               RCALL   onKeyDown
    218          			break;
   \                     ??main_0:
   \   0000001E   ....               LDI     R18, LOW(rq)
   \   00000020   ....               LDI     R19, (rq) >> 8
   \   00000022   ....               LDI     R16, LOW(event_queue)
   \   00000024   ....               LDI     R17, (event_queue) >> 8
   \   00000026   ........           CALL    qGet
   \   0000002A   2300               TST     R16
   \   0000002C   F3C1               BREQ    ??main_0
   \   0000002E   9100....           LDS     R16, rq
   \   00000032   9502               SWAP    R16
   \   00000034   700F               ANDI    R16, 0x0F
   \   00000036   5001               SUBI    R16, 1
   \   00000038   F389               BREQ    ??main_1
   \   0000003A   950A               DEC     R16
   \   0000003C   F029               BREQ    ??main_2
   \   0000003E   950A               DEC     R16
   \   00000040   F029               BREQ    ??main_3
   \   00000042   950A               DEC     R16
   \   00000044   F029               BREQ    ??main_4
   \   00000046   CFEB               RJMP    ??main_0
    219          		case KEY_UP:
    220          			onKeyUp();
   \                     ??main_2:
   \   00000048   ....               RCALL   onKeyUp
    221          			break;
   \   0000004A   CFE9               RJMP    ??main_0
    222          		case CLOCK_INC:
    223          			onClockInc();
   \                     ??main_3:
   \   0000004C   ....               RCALL   onClockInc
    224          			break;
   \   0000004E   CFE7               RJMP    ??main_0
    225                          case CLOCK_SET:
    226                                  onClockSet();
   \                     ??main_4:
   \   00000050   ....               RCALL   onClockSet
    227                                  break;
   \   00000052   CFE5               RJMP    ??main_0
    228          		}
    229          	}
    230          }

   \                                 In  segment INTVEC, offset 0x3c, root
   \                     `??ISR_OCR0::??INTVEC 60`:
   \   0000003C   ........           JMP     ISR_OCR0

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for currPos>`:
   \   00000000   30                 DC8 48

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for pre_dv>`:
   \   00000000   64                 DC8 100
    231          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   ISR_OCR0
       16      2   -> kbService
       16      2   -> qAdd
       16      2   -> rtcInc
      0      2   InitDevices
        0      2   -> LCDClear
        0      2   -> LCDInit
        0      2   -> LCDLoadUserCharP
      0      2   cDec
      0      2   cInc
      0      2   main
        0      2   -> InitDevices
        0      2   -> onClockInc
        0      2   -> onClockSet
        0      2   -> onKeyDown
        0      2   -> onKeyUp
        0      2   -> qAdd
        0      2   -> qGet
        0      2   -> qInit
     10      2   onClockInc
        2      2   -> LCDGoTo
        2      2   -> memcpy_P
       10      2   -> printf_P
      0      2   onClockSet
        0      2   -> LCDGoTo
        0      2   -> LCDPutChar
      0      2   onKeyDown
        0      2   -> LCDGoTo
        0      2   -> LCDPutChar
        0      2   -> cDec
        0      2   -> cInc
        0      2   -> onClockSet
      0      2   onKeyUp
        0      2   -> LCDGoTo
        0      2   -> LCDPutChar
      2      2   putchar
        2      2   -> LCDPutChar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for currPos>
       1  ?<Initializer for pre_dv>
     124  ISR_OCR0
       4  ISR_OCR0::??INTVEC 60
      40  InitDevices
      64  LCDUserChar
       1  _A_OCR0
       1  _A_TCCR0
       1  _A_TCNT0
       1  _A_TIMSK
      84  cDec
      92  cInc
       1  currPos
      16  ev_q_buf
       6  event_queue
      84  main
      98  onClockInc
      24  onClockSet
     328  onKeyDown
      20  onKeyUp
       1  pre_dv
      20  putchar
       1  rq
       4  rtc
      18  sCl
       4  sFri
       4  sMon
       4  sSat
       4  sSun
       4  sThu
       4  sTue
      14  sWDay
       4  sWed
       4  tmp_buf
      14  -- Other

 
   4 bytes in segment ABSOLUTE
 914 bytes in segment CODE
  14 bytes in segment INITTAB
   4 bytes in segment INTVEC
 124 bytes in segment NEAR_F
   2 bytes in segment NEAR_I
   2 bytes in segment NEAR_ID
  31 bytes in segment NEAR_Z
 
 1 040 bytes of CODE memory (+ 18 bytes shared)
    33 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
